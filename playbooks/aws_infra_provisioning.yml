---
- name: Provision VM in AWS with Terraform
  hosts: localhost

  tasks:
    - name: Git checkout the terraform code
      ansible.builtin.git:
        repo: "{{ git_repo_url }}"
        dest: /tmp/aap_tf_snow_demo
        version: main
      check_mode: false

    - name: Provision or deprovision the infra with Terraform
      cloud.terraform.terraform:
        project_path: "/tmp/aap_tf_snow_demo/terraform/aws"
        # For a destroy we need this to be absent and false
        state: "{{ infra_state }}"
        force_init: "{{ force_init }}"
        variables:
          # https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.4/html/automation_controller_user_guide/controller-credentials#access_amazon_ec2_credentials_in_an_ansible_playbook
          access_key: '{{ lookup("env", "AWS_ACCESS_KEY_ID") }}'
          secret_key: '{{ lookup("env", "AWS_SECRET_ACCESS_KEY") }}'
          webserver_count: "{{ server_count }}"
          instance_name_lb: "{{ project_name }}_lb"
          instance_name_webserver: "{{ project_name }}_web"
          project_name: "{{ project_name }}"
        backend_config:
          endpoints: "{s3 = \"https://{{ tf_backend_s3 }}\"}"
          insecure: "true"
          region: "{{ tf_backend_region }}"
          bucket: "{{ tf_backend_bucket }}"
          key: "{{ tf_backend_bucket_object_key }}"
          access_key: "{{ tf_backend_access_key }}"
          secret_key: "{{ tf_backend_secret_key }}"
          # For use with non-AWS, but S3 compatible, object storage.
          skip_region_validation: "true"
          skip_credentials_validation: "true"
          skip_metadata_api_check: "true"
          skip_requesting_account_id: "true"
          use_path_style: "true"
      register: terraformInfra
